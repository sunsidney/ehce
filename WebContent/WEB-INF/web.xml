<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	
	<!--oauth拦截器-->
	<filter>
		<filter-name>oauthFilter</filter-name>
		<filter-class>cn.com.hadon.oauth.OauthFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>oauthFilter</filter-name>
		<url-pattern>*.dox</url-pattern>
	</filter-mapping>
	
	<!-- 配置Spring配置文件的地址,如果有业务的spring配置,则在后面再加上Spring配置的路径 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			 /WEB-INF/config/core/spring/spring-*.xml
		</param-value>
	</context-param>
	<!-- 配置Spring配置文件的地址 -->

	<!-- 过滤器,用来将请求的字符统一转化成 UTF-8 编码 -->
	<filter>
		<filter-name>CharacterEncoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<!-- forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式 -->
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- 过滤器,用来将请求的字符统一转化成 UTF-8 编码 -->
	<filter-mapping>
		<filter-name>CharacterEncoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 不进行任何过滤 -->
	
	<!-- 解决跨越问题-->
	<filter>  
		<filter-name>CORS</filter-name>  
		<filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>  
		<init-param>  
		 <param-name>cors.allowOrigin</param-name>  
		    <param-value>*</param-value>  
		</init-param>  
		<init-param>  
		 <param-name>cors.supportedMethods</param-name>  
		    <param-value>GET, POST, HEAD, PUT, DELETE</param-value>  
		</init-param>  
		<init-param>  
		 <param-name>cors.supportedHeaders</param-name>  
		    <param-value>Accept, Origin, X-Requested-With, Content-Type, Last-Modified</param-value>  
		</init-param>  
		<init-param>  
		    <param-name>cors.exposedHeaders</param-name>  
		    <param-value>Set-Cookie</param-value>  
		</init-param>  
		<init-param>  
		    <param-name>cors.supportsCredentials</param-name>  
		    <param-value>true</param-value>  
		</init-param>  
	</filter>  
	<filter-mapping>  
		<filter-name>CORS</filter-name>  
		<url-pattern>/*</url-pattern>  
	</filter-mapping>

	<!-- spring分发servlet -->
	<servlet>
		<servlet-name>spring</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/core/spring/spring-servlet.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>*.dox</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>spring</servlet-name>
		<url-pattern>/oauth/*</url-pattern>
	</servlet-mapping>

	<!-- 配置Spring的web加载器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 应用中心缓存监听器 
	<listener>
		<listener-class>cn.com.hadon.mo.app.AppCacheListener</listener-class>
	</listener>
	<listener>
		<listener-class>cn.com.hadon.mo.ldap.cache.LdapOrgCacheListener</listener-class>
	</listener>-->
	
	<!-- 加载系统缓存数据 -->
	<listener>
		<listener-class>cn.com.hadon.cache.listener.CacheLoadListener</listener-class>
	</listener>
	
	<!--Sitemesh后台框架过滤器 -->
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>org.sitemesh.config.ConfigurableSiteMeshFilter</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Jersey REST spring集成 -->
	<servlet>
		<servlet-name>Jersey REST Service</servlet-name>
		<servlet-class>com.sun.jersey.spi.spring.container.servlet.SpringServlet</servlet-class>
		<!-- rest服务路径 -->
		<init-param>
			<param-name>com.sun.jersey.config.property.packages</param-name>
			<param-value>cn.com.hadon</param-value>
		</init-param>
		<!-- 开启POJO和JSON的支持 -->
		<init-param>
			<param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
			<param-value>true</param-value>
		</init-param>
		<!-- 开启POST方法与DELETE方法转换 -->
		<init-param>
			<param-name>com.sun.jersey.spi.container.ContainerRequestFilters</param-name>
			<param-value>com.sun.jersey.api.container.filter.PostReplaceFilter</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>Jersey REST Service</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>
	
	<!-- 做web端的登录验证。 -->
	<servlet>
		<servlet-name>LoginAuthenticationServlet</servlet-name>
		<servlet-class>cn.com.hadon.mo.web.security.permission.LoginAuthenticationServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>LoginAuthenticationServlet</servlet-name>
		<url-pattern>/loginAuthentication</url-pattern>
	</servlet-mapping>
	
	<!-- 用户在抛到底层认证时需要经过的Servlet认证 -->
	<servlet>
		<servlet-name>UserCertificationServlet</servlet-name>
		<servlet-class>
			cn.com.hadon.platform.security.permission.UserCertificationServlet
		</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>UserCertificationServlet</servlet-name>
		<url-pattern>/userCertification</url-pattern>
	</servlet-mapping>
	<!-- 用户在抛到底层认证时需要经过的Servlet认证 -->

	<!-- URL 转向 -->
	<servlet>
		<servlet-name>forward</servlet-name>
		<servlet-class>cn.com.hadon.platform.action.URLForwardServlet</servlet-class>
		<load-on-startup>0</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>forward</servlet-name>
		<url-pattern>*.sac</url-pattern>
	</servlet-mapping>
	<!-- URL 转向 -->
	
	<!-- 授权与认证过滤器 -->
	<filter>
		<filter-name>security</filter-name>
		<filter-class>cn.com.hadon.platform.security.permission.SecurityFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>security</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>security</filter-name>
		<url-pattern>*.sac</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>security</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	<!-- 授权与认证过滤器 -->

	<welcome-file-list>
		<welcome-file>login.html</welcome-file>
		<welcome-file>login.jsp</welcome-file>
		<welcome-file>adminlogin.jsp</welcome-file>
	</welcome-file-list>

	<!-- 错误页面 -->
	<error-page>
		<error-code>404</error-code>
		<location>/error_404.jsp</location>
	</error-page>

</web-app>
